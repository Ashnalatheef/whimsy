#!/usr/bin/env ruby
require 'tmpdir'
require 'optparse'
require 'etc'

#########################################################################
#
# Sets up a macOS machine for whimsy development.  Pass --help as an
# option to get a description of the arguments.  See
# https://github.com/apache/whimsy/blob/master/SETUPMYMAC.MD#readme
# for a more complete description.
#
#########################################################################

unless RUBY_PLATFORM.include? 'darwin'
  STDERR.puts "This script is intended to be run on macOS"
  exit 1
end

unless (RUBY_VERSION.split('.').map(&:to_i) <=> [2, 4, 1]) >= 0
  STDERR.puts "Ruby 2.4.1 or later is required"
  exit 1
end

WHIMSY = File.realpath File.expand_path('..', __dir__)
COMMAND = File.realpath($0)
ARGS = ARGV.dup
Dir.chdir WHIMSY

force = {}
restart_apache = false
$brew_updated = false

### Convenience methods

# output a header line, in color if available
def color(line)
  if STDOUT.isatty and ENV['TERM'].to_s.include? 'color'
    puts "\n\u001b[35;1m#{line}\u001b[0m"
  else
    puts "\n" + line
  end
end

# echo a command and run it
def run *args
  color "$ " + Array(args).join(' ')
  Kernel.system *args
end

# run brew, making sure that a brew update is done before the first command
def brew *args
  if not $brew_updated
    run 'brew', 'update'
    $brew_updated = true
  end

  run 'brew', *args
end

# Switch to root
def sudo
  if Process.uid != 0
    system "sudo", RbConfig.ruby, COMMAND, *ARGS
    exit $?.exitstatus unless $?.success?
  else
    yield
  end
end

### Parse options to determine how whimsy code is to be run

option = :www

OptionParser.new do |opts|
  opts.banner = "Usage: #$0 [options]"

  opts.on('-u', '--user', "Run whimsy under your user") do |opt|
    option = :user
  end

  opts.on('-w', '--web', "Run whimsy under the Apache web user") do |opt|
    option = :web
  end

  opts.on('-d', '--docker', "Run whimsy on docker") do |opt|
    option = :docker
  end

  opts.on('--gem', '--gems', "Upgrade gem dependencies") do |opt|
    force[:gems] = true
  end

  opts.on('--bundle', '--bundler', "Upgrade bundler") do |opt|
    force[:bundler] = true
  end

  opts.on('--node', "Upgrade to the latest node.js") do |opt|
    force[:node] = true
  end

  opts.on('--passenger', "Upgrade to the latest Phusion Passenger") do |opt|
    force[:passenger] = true
  end

  opts.on('--ldap', "Reconfigure LDAP") do |opt|
    force[:ldap] = true
  end
end.parse!

user = option == :www ? '_www' : (ENV['SUDO_USER'] || Etc.getlogin)
uid = Etc.getpwnam(user).uid
gid = Etc.getpwnam(user).gid
group = Etc.getgrgid(gid).name

### Install Homebrew

if Process.uid != 0 and option != :docker
  if `which brew`.empty?
    script = 'https://raw.githubusercontent.com/Homebrew/install/master/install'
    color %($ ruby -e "$(curl -fsSL #{script})")
    eval `curl -fsSL #{script}`
  end
end

## Install Node.js

if Process.uid != 0 and option != :docker
  if `which node`.empty?
    brew 'install', 'node' 
  elsif force[:node]
    brew 'upgrade', 'node' 
  end

  run 'npm install -g npm' if `which npm`.empty? or force[:node]

  # Prompt for xcode installation
  `svn --version`

  # Install passenger
  if `which passenger`.empty?
    brew 'install', 'passenger'
  elsif force[:passenger]
    brew 'upgrade', 'passenger'
  end
end

### Create /srv

mac_version = `sw_vers`[/ProductVersion:\s+(.*)/, 1]
unless Dir.exist? '/srv'
  sudo do
    sudo_user = ENV['SUDO_USER']
    sudo_group = Etc.getpwnam(sudo_user).gid
    if (mac_version.split('.').map(&:to_i) <=> [10, 15, 0]) >= 0
      # Catalina or later
      run 'mkdir', '/var/whimsy' unless Dir.exist? '/var/whimsy'
      run 'chown', "#{sudo_user}:#{sudo_group}", '/var/whimsy'
      run 'touch', '/etc/synthetic.conf'
      SYNTHETIC = '/etc/synthetic.conf'
      unless File.read(SYNTHETIC).include? "/var/whimsy"
        color "$ edit #{SYNTHETIC}"
        File.write SYNTHETIC, File.read(SYNTHETIC) + "srv\t/var/whimsy\n"
        STDERR.puts "#{SYNTHETIC} updated; reboot machine and rerun this script"
        puts %(\nPress "y" to reboot now, anything else to exit)
        run "shutdown -r now" if gets.strip.downcase == "y"
        exit 1
      end
    else
      # prior to Catalina
      run 'mkdir', '/srv'
      run 'chown', "#{sudo_user}:#{sudo_group}", '/srv'
    end
  end
end

# relocate whimsy clone
if not Dir.exist? '/srv/whimsy'
  sudo do
    run 'mv', WHIMSY, '/srv/whimsy'
    run 'ln', '-s', '/srv/whimsy', WHIMSY
  end
end

### Define directories
directories = [
  '/srv/agenda',
  '/srv/cache',
  '/srv/secretary',
  '/srv/secretary/tlpreq',
  '/srv/whimsy/www/board/minutes',
  '/srv/whimsy/www/logs',
  '/srv/whimsy/www/public',
]

directories.each do |dir|
  sudo {run 'mkdir', '-p', dir} unless Dir.exist? dir

  unless File.stat(dir).uid == uid
    sudo {run 'chown', '-R', "#{uid}:#{gid}", dir}
  end
end

### Docker installation

if option == :docker
  unless system 'docker info > /dev/null 2>&1'
    STDERR.puts "Please start docker and run this command again"
    exit 1
  end

  if Process.uid != 0
    Dir.chdir '/srv/whimsy' do
      run 'rake docker:update'
    end
  end

  exit
end

### Configure passenger

passenger_conf = '/etc/apache2/other/passenger.conf'
if force[:passenger] or not File.exist? passenger_conf
  if Process.uid == 0
    instructions = `su $SUDO_USER -c "brew info passenger"`
  else
    instructions = `brew info passenger`
  end
  section = instructions[/To activate Phusion Passenger for Apache.*(\n\n|\z)/m]
  snippet = section.scan(/^ .*/).join("\n") + "\n"
  snippet[/Passenger\w*Ruby\s+(.*)/, 1] = RbConfig.ruby

  if option != :user
    snippet += "PassengerUser #{user}\nPassengerGroup #{group}\n"
  end

  if not File.exists?(passenger_conf) or File.read(passenger_conf) != snippet
    sudo do
      color "$ edit #{passenger_conf}"
      File.write passenger_conf, snippet

      restart_apache = true
    end
  end
end

### Install bundler

if `which bundle`.empty?
  sudo {run 'gem install bundler'} 
elsif force[:bundler]
  sudo {run 'gem update bundler'} 
end

### Installl gems

if Process.uid != 0
  if force[:gems] or not File.exist?("#{WHIMSY}/Gemfile.lock")
    # collect up all gems and install them so the sudo password is only
    # asked for once
    gemlines = Dir["#{WHIMSY}/**/Gemfile"].
      map {|file| File.read file}.join.scan(/^\s*gem\s.*/)

    if File.exist? "#{WHIMSY}/asf.gemspec"
      gemlines +=
        File.read("#{WHIMSY}/asf.gemspec").scan(/add_dependency\((.*)\)/).
        map {|(line)| "gem #{line}"}
    end

    gems = gemlines.map {|line| [line[/['"](.*?)['"]/, 1], line.strip]}.to_h
    gems['whimsy-asf'].sub! /\bpath:.*/, "path: #{WHIMSY.inspect}"

    Dir.mktmpdir do |dir|
      Dir.chdir dir do
        File.write "Gemfile", 
          "source 'https://rubygems.org'\n#{gems.values.join("\n")}"

        run "bundle install"
      end
    end

    Dir.chdir WHIMSY do
      run "rake", "update"
    end
  end
end

### Configure LDAP

if File.exist? "#{WHIMSY}/Gemfile.lock"
  $LOAD_PATH.unshift '/srv/whimsy/lib'
  require 'whimsy/asf'
  if force[:ldap] or not ASF::LDAP.configured?
    sudo do
      color '$ ruby -I lib -r whimsy/asf -e "ASF::LDAP.configure"'
      ASF::LDAP.configure
    end
  end
end

### Make whimsy.local an alias for your machine

hosts = File.read('/etc/hosts')
unless hosts.include? 'whimsy.local'
  sudo do
    color '$ edit /etc/hosts'
    hosts[/^[:\d].*\slocalhost\b.*()/, 1] = ' whimsy.local'
    File.write '/etc/hosts', hosts
  end
end

### Configure httpd

HTTPD_CONF = '/etc/apache2/httpd.conf'

config = File.read(HTTPD_CONF)

instructions = File.read(File.expand_path('../MACOSX.md', __dir__))

section = instructions[/^Configure whimsy.local vhost\n--+\n.*?\n--/m]

uncomment = section[/Uncomment.*?```(.*?)```/m, 1]
add = section[/Add.*?```(.*?)```/m, 1].strip

uncomment.scan(/^\S.*/).each do |line|
  config.sub!(/^\s*#\s*#{line}\s*$/) { $&.sub('#', '') }

  if config !~ /^\s*#{line}\s*$/
    STDERR.puts "Not found: #{line}"
    exit 1
  end
end

config += "\n" unless config.end_with? "\n"

add.scan(/^\S.*/).each do |line|
  if config !~ /^\s*#{line}\s*$/
    config += "#{line}\n"
  end
end

config[/^User\s+(.*)/, 1] = user
config[/^Group\s+(.*)/, 1] = group

if config != File.read(HTTPD_CONF)
  sudo do
    color "$ edit #{HTTPD_CONF}"
    File.rename HTTPD_CONF, HTTPD_CONF + ".original"
    File.write(HTTPD_CONF, config)
  end

  restart_apache = true
end

wconf_source = "#{WHIMSY}/config/whimsy.conf"
wconf_target = '/private/etc/apache2/other/whimsy.conf'
if 
  not File.exist?(wconf_target) or 
  File.read(wconf_target) != File.read(wconf_source)
then
  sudo do
    run 'cp', wconf_source, wconf_target
  end

  restart_apache = true
end

### Make applications restart on change

if Process.uid != 0 and option != :docker
  plist = "#{Dir.home}/Library/LaunchAgents/toucher.plist"
  contents = File.read("#{__dir__}/toucher.plist")
  contents[/>(.*ruby.*)</, 1] = RbConfig.ruby
  if not File.exist?(plist) or File.read(plist) != contents
    color "$ edit #{plist}"
    File.write plist, contents

    if `launchctl list`.include? 'org.apache.whimsy/toucher'
      run "launchctl unload #{plist}"
    end
  end

  if not `launchctl list`.include? 'org.apache.whimsy/toucher'
    run "launchctl load #{plist}"
  end
end

### Start Apache httpd

if Process.uid == 0
  if not `launchctl list`.include? 'org.apache.httpd'
    run "launchctl load -w /System/Library/LaunchDaemons/org.apache.httpd.plist"
  elsif restart_apache
    run "apachectl restart"
    sleep 0.5
  end
else
  system 'open http://whimsy.local/'
end
